"""
Django settings for setting project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _
import os
from dotenv import load_dotenv
import sys
import socket

# Initialize dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', default='mobilecorner1212')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Development/Production environment settings
DEVELOPMENT = DEBUG

# Update ALLOWED_HOSTS based on environment
env_allowed_hosts = os.getenv('ALLOWED_HOSTS', '')
if env_allowed_hosts:
    # Split comma-separated string into list
    ALLOWED_HOSTS = [host.strip() for host in env_allowed_hosts.split(',') if host.strip()]
else:
    # Default hosts based on environment
    if DEBUG:
        ALLOWED_HOSTS = ['*']
    else:
        ALLOWED_HOSTS = [
            'future-store-one.vercel.app',
            'mobilecorner.pk',
            'www.mobilecorner.pk',
            '*.vercel.app',
            '*.now.sh',
            'localhost',
            '127.0.0.1',
        ]

# Ensure ALLOWED_HOSTS is always a list
if not isinstance(ALLOWED_HOSTS, (list, tuple)):
    ALLOWED_HOSTS = [str(ALLOWED_HOSTS)]


# Application definition

INSTALLED_APPS = [
    'unfold',
    'unfold.contrib.filters',
    'unfold.contrib.forms',
    'unfold.contrib.inlines',
    'unfold.contrib.import_export',
    'unfold.contrib.guardian',
    'unfold.contrib.simple_history',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Wagtail CMS apps
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.contrib.sitemaps',
    'wagtail.contrib.routable_page',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail',
    # 'wagtail_modeladmin',  # Temporarily disabled due to compatibility issues
    'wagtail.contrib.styleguide',
    'modelcluster',
    'taggit',
    
    'social_django',  # Add social auth app
    'whitenoise.runserver_nostatic',
    'user_auth',  # 
    'store.apps.StoreConfig',
    'cms_store.apps.CmsStoreConfig',  # New CMS app for store pages
    'chatbot.apps.ChatbotConfig',
    'inventory_erp.apps.InventoryErpConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
]

# Add WhiteNoise middleware only if not on Vercel
VERCEL_DEPLOYMENT = os.getenv('VERCEL', False) or os.getenv('VERCEL_ENV', False)
if not DEVELOPMENT and not VERCEL_DEPLOYMENT:
    MIDDLEWARE.append('whitenoise.middleware.WhiteNoiseMiddleware')

MIDDLEWARE.extend([
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    
    # Wagtail middleware
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
])

ROOT_URLCONF = 'setting.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'store.context_processors.categories_processor',
                'cms_store.context_processors.cms_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'setting.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE'),
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Add this for better database connection handling
CONN_MAX_AGE = 0  # Close connections after each request
ATOMIC_REQUESTS = True  # Wrap each request in a transaction


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Create static directories if they don't exist (only in development)
if DEVELOPMENT:
    try:
        os.makedirs(STATIC_ROOT, exist_ok=True)
        os.makedirs(os.path.join(BASE_DIR, 'static'), exist_ok=True)
    except OSError:
        # Directory creation failed (e.g., read-only filesystem in production)
        pass

# Static files storage configuration
# Check if we're on Vercel (which handles static files itself)
VERCEL_DEPLOYMENT = os.getenv('VERCEL', False) or os.getenv('VERCEL_ENV', False)

if not DEVELOPMENT and not VERCEL_DEPLOYMENT:
    # In production (non-Vercel), use WhiteNoise for static file serving
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    # Add WhiteNoise configuration for better performance
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True
    WHITENOISE_INDEX_FILE = True
    WHITENOISE_ROOT = os.path.join(BASE_DIR, 'staticfiles')
else:
    # In development or Vercel, use default static files storage
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'user_auth.User'


UNFOLD = {
    "SITE_TITLE": "Mobile Corner",
    "SITE_HEADER": "Mobile Corner Admin",
    "SITE_URL": "/",
    "SITE_ICON": lambda request: static("logo-light.JPG"),  # both modes, optimise for 32px height
    # "SITE_ICON": {
    #     "light": lambda request: static("icon-light.svg"),  # light mode
    #     "dark": lambda request: static("icon-dark.svg"),  # dark mode
    # },
    "SITE_DROPDOWN": [
        {
            "icon": "diamond",
            "title": _("Mobile Corner"),
            "link": reverse_lazy("admin:index"),
        },
    ],
    "SITE_LOGO": {
        "light": lambda request: static("logo-light.JPG"),  # light mode
        "dark": lambda request: static("logo-dark.JPG"),  # dark mode
    },
    "SITE_SYMBOL": "speed",  # symbol from icon set
    "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x32",
            "type": "image/svg+xml",
            "href": lambda request: static("logo-light.JPG"),
        },
    ],
    "SHOW_HISTORY": True, # show/hide "History" button, default: True
    "SHOW_VIEW_ON_SITE": True, # show/hide "View on site" button, default: True
    "SHOW_BACK_BUTTON": True, # show/hide "Back" button on changeform in header, default: False
    "LOGIN": {
        "image": lambda request: static("bg.jpg"),
        "title": "Welcome to Mobile Corner Admin",
        "description": "Please login to access the system",
        
        # "redirect_after": lambda request: reverse_lazy("admin:APP_MODEL_changelist"),
    },
    "STYLES": [
                lambda request: static("css/admin.css"),
    ],
    "SCRIPTS": [

    ],
    "COLORS": {
        "base": {
            "50": "255 255 255",  # Light mode background
            "100": "245 245 245",  # Light mode surface
            "200": "229 229 229",  # Light mode border
            "300": "209 213 219",  # Light mode subtle text
            "400": "102 102 102",  # Light mode secondary text
            "500": "64 64 64",     # Light mode primary text
            "600": "45 45 45",     # Dark mode text
            "700": "38 38 38",     # Dark mode surface
            "800": "26 26 26",     # Dark mode background
            "900": "19 19 19",     # Darker background
            "950": "13 13 13",     # Darkest background
        },
        "primary": {
            "50": "245 245 245",   # mc-white in light mode
            "100": "229 229 229",  # mc-accent light hover
            "200": "212 212 212",  # mc-accent light active
            "300": "245 245 245",  # mc-accent
            "400": "156 156 156",  # mc-light-grey
            "500": "64 64 64",     # mc-grey
            "600": "45 45 45",     # mc-dark
            "700": "26 26 26",     # mc-black
            "800": "19 19 19",     # Darker shade
            "900": "13 13 13",     # Darkest shade
            "950": "0 0 0",        # Pure black
        },        "font": {
            "subtle-light": "var(--color-base-400)",    # Light mode secondary text
            "subtle-dark": "var(--color-base-400)",     # Dark mode secondary text
            "default-light": "var(--color-base-700)",   # Light mode primary text
            "default-dark": "var(--color-base-100)",    # Dark mode primary text
            "important-light": "var(--color-base-800)", # Light mode important text
            "important-dark": "var(--color-base-50)",   # Dark mode important text
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "🇬🇧",
                "fr": "🇫🇷",
                "nl": "🇧🇪",
            },
        },
    },
   "SIDEBAR": {
        "show_search": False,  # Search in applications and models names
        "show_all_applications": False,  # Dropdown with all applications and models
        "navigation": [
            {
                "title": _("Mobile Corner"),
                "collapsible": False,  # Collapsible group of links
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Analytics Dashboard"),
                        "icon": "analytics",  # Supported icon set: https://fonts.google.com/icons
                        "link": reverse_lazy("admin_dashboard"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Users"),
                        "icon": "people",
                        "badge": "Careful",
                        "link": reverse_lazy("admin:user_auth_user_changelist"),
                    },
                    {
                        "title": _("Products"),
                        "icon": "phone",
                        "link": reverse_lazy("admin:store_product_changelist"),
                    },
                    {
                        "title": _("Orders"),   
                        "icon": "book",
                        "link": reverse_lazy("admin:store_order_changelist"),
                    },
                    {
                        "title": _("Reviews"),
                        "icon": "reviews",
                        "link": reverse_lazy("admin:store_review_changelist"),
                    },
                    {
                        "title": _("Contacts"),
                        "icon": "chat",
                        "link": reverse_lazy("admin:store_contact_changelist"),
                    },
                    {
                        "title": _("Delivery Services"),
                        "icon": "delivery_dining",
                        "link": reverse_lazy("admin:store_deliveryservice_changelist"),
                    },
                    {
                        "title": _("CMS Admin"),
                        "icon": "web",
                        "link": "/cms-admin/",
                        "permission": lambda request: request.user.is_staff,
                    }
                ],
            },
        ],
    },

}

# Social Auth Configuration
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)
# Google OAuth2 Configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY =os.getenv('GOOGLE_OAUTH2_KEY', default='')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET =os.getenv('GOOGLE_OAUTH2_SECRET', default='')

# Redirect to home page after successful social authentication
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/'

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

# Custom password validation
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Security settings based on environment
if DEVELOPMENT:
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_PROXY_SSL_HEADER = None
    SECURE_SSL_REDIRECT = False
    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
    
    # Disable HTTPS requirements
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
else:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# CSRF settings including development URLs
CSRF_TRUSTED_ORIGINS = [
    'https://*.vercel.app',
    'https://mobilecorner.pk',
    'https://www.mobilecorner.pk',
    'https://future-store-one.vercel.app',
    'https://*.now.sh',
    'https://localhost:*',
    'https://127.0.0.1:*',
]
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # For Gmail
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER') 
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD') 
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Custom error handlers
HANDLER404 = 'setting.urls.custom_404'
HANDLER500 = 'setting.urls.custom_500'
HANDLER403 = 'setting.urls.custom_403'
HANDLER400 = 'setting.urls.custom_400'

# Wagtail settings
WAGTAIL_SITE_NAME = 'Mobile Corner CMS'
WAGTAILIMAGES_IMAGE_MODEL = 'wagtailimages.Image'

# Base URL to use when referring to full URLs within the Wagtail admin backend
BASE_URL = 'http://localhost:8000' if DEBUG else 'https://mobilecorner.pk'
WAGTAILADMIN_BASE_URL = BASE_URL

# Wagtail email notifications from address
WAGTAILADMIN_NOTIFICATION_FROM_EMAIL = EMAIL_HOST_USER

# Reverse the default case-sensitive handling of tags
TAGGIT_CASE_INSENSITIVE = True